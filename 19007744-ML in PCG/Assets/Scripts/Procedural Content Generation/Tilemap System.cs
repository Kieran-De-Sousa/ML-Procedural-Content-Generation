// Base
using System;
using System.Collections;
using System.Collections.Generic;

// Unity
using UnityEngine;
using UnityEngine.Tilemaps;

// Sub-namespace for tilemap-related utilities.
namespace PCG.Tilemaps
{
    /// <summary>
    /// Manages data related to the tilemaps in the simulation.
    /// </summary>
    public class TilemapSystem : ManagerSystem
    {
        // Data structure holding data related to the tilemaps, and tiles, which is accessed by other systems.
        public TilemapData tilemapData;
        // Store the highest engagement room generated so far...
        public RoomData highestEngagementRoom;

        [Header("All Tilemaps")]
        public List<Tilemap> tilemaps;

        [Header("Decoration Tilemap")]
        public Tilemap tilemap;

        [Space]

        [Header("Collidable Tilemap")]
        [Tooltip("Tilemap Contains Rigidbody, Composite collider, tilemap collider (NOT TRIGGERS)")]
        public Tilemap collidable;

        [Space]

        [Header("Trigger Tilemap")]
        [Tooltip("Tilemap Contains Rigidbody, Composite collider, tilemap collider (TRIGGERS)")]
        public Tilemap entities;

        public Transform instantiatedTilesParent;

        protected void Awake()
        {
            // Initialise tilemap data references
            tilemapData.floor = tilemap;
            tilemapData.collidable = collidable;
            tilemapData.trigger = entities;
        }

        /// <summary>
        /// Add the tilemaps to the list whenever we change the tilemap System in Editor.
        /// </summary>
        private void OnValidate()
        {
            AddTilemapToList(tilemap);
            AddTilemapToList(collidable);
            AddTilemapToList(entities);

            tilemapData.floor = tilemap;
            tilemapData.collidable = collidable;
            tilemapData.trigger = entities;
        }

        /// <summary>
        /// Adds the tilemap to the list of <c>tilemaps</c> if not already.
        /// </summary>
        /// <param name="tilemapToAdd">Tilemap to be added to list.</param>
        private void AddTilemapToList(Tilemap tilemapToAdd)
        {
            if (tilemapToAdd != null && !tilemaps.Contains(tilemapToAdd))
            {
                tilemaps.Add(tilemapToAdd);
            }
        }

        public override void ResetSystem() { }
    }

    /// <summary>
    /// Data container for tilemap related data, including list of tiles for PCG, and tilemaps of simulation.
    /// </summary>
    [Serializable]
    public class TilemapData
    {
        /*[HideInInspector]*/ public List<Tilemap> allTilemaps = new();

        /*[HideInInspector]*/ public Tilemap floor = new();
        /*[HideInInspector]*/ public Tilemap collidable = new();
        /*[HideInInspector]*/ public Tilemap trigger = new();

        public List<Tile> tiles = new();

        public TilemapData()
        {
            allTilemaps.AddRange(new List<Tilemap>
            {
                floor,
                collidable,
                trigger
            });
        }
    }

    /// <summary>
    /// Data container for data of room generated by PCG system in the simulation.
    /// </summary>
    [Serializable]
    public struct RoomData
    {
        public Tile[,] tilemap;

        [HideInInspector] public int RoomWidth;
        [HideInInspector] public int RoomHeight;
        [HideInInspector] public EngagementMetrics engagementPreviousRoom;

        public (int x, int y) RoomCentre;

        public (int x, int y) TopDoor;
        public (int x, int y) BottomDoor;
        public (int x, int y) LeftDoor;
        public (int x, int y) RightDoor;

        /// <summary>
        /// Generates a RoomData instance with specified width and height.
        /// </summary>
        /// <param name="width">Width of the room.</param>
        /// <param name="height">Height of the room.</param>
        /// <returns>RoomData instance with centre and door positions.</returns>
        public static RoomData GenerateRoom(int width, int height)
        {
            RoomData roomData = new RoomData
            {
                RoomWidth = width,
                RoomHeight = height,
                RoomCentre = (width / 2, height / 2),
                TopDoor = (width / 2, height - 1),
                BottomDoor = (width / 2, 0),
                LeftDoor = (0, height / 2),
                RightDoor = (width - 1, height / 2)
            };

            return roomData;
        }
    }

    [Serializable]
    public struct EngagementMetrics
    {
        public float EngagementScore => itemPickups + exploration;
        public float RewardScore;
        public int itemPickups;
        public float exploration;

        public EngagementMetrics(float reward, int items, float exploring)
        {
            this.RewardScore = reward;
            this.itemPickups = items;
            this.exploration = exploring;
        }

        public void ResetEngagement()
        {
            this.RewardScore = default;
            this.itemPickups = default;
            this.exploration = default;
        }

        public void SetRewardScore(float reward) => this.RewardScore = reward;
        public void AddRewardScore(float reward) => this.RewardScore += reward;
        public void AddItemPickup(int item) => this.itemPickups += item;
        public void AddExploration(float explore) => this.exploration += explore;
    }
}