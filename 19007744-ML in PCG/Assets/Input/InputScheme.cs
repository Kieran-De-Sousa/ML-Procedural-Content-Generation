//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/InputScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputScheme"",
    ""maps"": [
        {
            ""name"": ""2DTopDown"",
            ""id"": ""2ce2e9f4-0231-43b4-adce-10ef020ab078"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1fbc8aaf-155f-4682-9530-62cb9d004fcc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d9545368-adb9-4c8f-ba35-93109de3f995"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a40698a6-66dc-4cec-a431-613aa20f330d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e1a94152-3626-4333-be2e-f88b6f557619"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fcd95736-a9cb-4e27-aa19-6c3b18bb71b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef984ad5-e3c8-4285-b912-42cd98478eda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PCG"",
            ""id"": ""2e296aeb-fec8-44cc-a312-60529657ae32"",
            ""actions"": [
                {
                    ""name"": ""Generate"",
                    ""type"": ""Button"",
                    ""id"": ""5b8dc3a5-7234-4e7f-83c7-a095382029fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spawn Player"",
                    ""type"": ""Button"",
                    ""id"": ""b5db4592-60ec-43ed-be03-07bac741246a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clear"",
                    ""type"": ""Button"",
                    ""id"": ""127d2d0c-8a44-4256-8f04-73a435cfc2e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f2806b4-040c-471a-a5b1-edf6f58b81fa"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Generate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd43a2e5-971b-4555-9d5a-9f73320d69f8"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac8674ba-ec53-4eb5-b36c-9a67379f52e8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // 2DTopDown
        m__2DTopDown = asset.FindActionMap("2DTopDown", throwIfNotFound: true);
        m__2DTopDown_Move = m__2DTopDown.FindAction("Move", throwIfNotFound: true);
        // PCG
        m_PCG = asset.FindActionMap("PCG", throwIfNotFound: true);
        m_PCG_Generate = m_PCG.FindAction("Generate", throwIfNotFound: true);
        m_PCG_SpawnPlayer = m_PCG.FindAction("Spawn Player", throwIfNotFound: true);
        m_PCG_Clear = m_PCG.FindAction("Clear", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 2DTopDown
    private readonly InputActionMap m__2DTopDown;
    private List<I_2DTopDownActions> m__2DTopDownActionsCallbackInterfaces = new List<I_2DTopDownActions>();
    private readonly InputAction m__2DTopDown_Move;
    public struct _2DTopDownActions
    {
        private @InputScheme m_Wrapper;
        public _2DTopDownActions(@InputScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__2DTopDown_Move;
        public InputActionMap Get() { return m_Wrapper.m__2DTopDown; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_2DTopDownActions set) { return set.Get(); }
        public void AddCallbacks(I_2DTopDownActions instance)
        {
            if (instance == null || m_Wrapper.m__2DTopDownActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2DTopDownActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(I_2DTopDownActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(I_2DTopDownActions instance)
        {
            if (m_Wrapper.m__2DTopDownActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_2DTopDownActions instance)
        {
            foreach (var item in m_Wrapper.m__2DTopDownActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2DTopDownActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _2DTopDownActions @_2DTopDown => new _2DTopDownActions(this);

    // PCG
    private readonly InputActionMap m_PCG;
    private List<IPCGActions> m_PCGActionsCallbackInterfaces = new List<IPCGActions>();
    private readonly InputAction m_PCG_Generate;
    private readonly InputAction m_PCG_SpawnPlayer;
    private readonly InputAction m_PCG_Clear;
    public struct PCGActions
    {
        private @InputScheme m_Wrapper;
        public PCGActions(@InputScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Generate => m_Wrapper.m_PCG_Generate;
        public InputAction @SpawnPlayer => m_Wrapper.m_PCG_SpawnPlayer;
        public InputAction @Clear => m_Wrapper.m_PCG_Clear;
        public InputActionMap Get() { return m_Wrapper.m_PCG; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCGActions set) { return set.Get(); }
        public void AddCallbacks(IPCGActions instance)
        {
            if (instance == null || m_Wrapper.m_PCGActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCGActionsCallbackInterfaces.Add(instance);
            @Generate.started += instance.OnGenerate;
            @Generate.performed += instance.OnGenerate;
            @Generate.canceled += instance.OnGenerate;
            @SpawnPlayer.started += instance.OnSpawnPlayer;
            @SpawnPlayer.performed += instance.OnSpawnPlayer;
            @SpawnPlayer.canceled += instance.OnSpawnPlayer;
            @Clear.started += instance.OnClear;
            @Clear.performed += instance.OnClear;
            @Clear.canceled += instance.OnClear;
        }

        private void UnregisterCallbacks(IPCGActions instance)
        {
            @Generate.started -= instance.OnGenerate;
            @Generate.performed -= instance.OnGenerate;
            @Generate.canceled -= instance.OnGenerate;
            @SpawnPlayer.started -= instance.OnSpawnPlayer;
            @SpawnPlayer.performed -= instance.OnSpawnPlayer;
            @SpawnPlayer.canceled -= instance.OnSpawnPlayer;
            @Clear.started -= instance.OnClear;
            @Clear.performed -= instance.OnClear;
            @Clear.canceled -= instance.OnClear;
        }

        public void RemoveCallbacks(IPCGActions instance)
        {
            if (m_Wrapper.m_PCGActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCGActions instance)
        {
            foreach (var item in m_Wrapper.m_PCGActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCGActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCGActions @PCG => new PCGActions(this);
    public interface I_2DTopDownActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPCGActions
    {
        void OnGenerate(InputAction.CallbackContext context);
        void OnSpawnPlayer(InputAction.CallbackContext context);
        void OnClear(InputAction.CallbackContext context);
    }
}
